// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dbsvc.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	dbsvc.proto

It has these top-level messages:
	PushRequest
	PushReply
	SelectRequest
	SelectReply
	Post
	SpatialTemporalInterval
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The push request contains two parameters.
type PushRequest struct {
	Posts []*Post `protobuf:"bytes,1,rep,name=posts" json:"posts,omitempty"`
}

func (m *PushRequest) Reset()                    { *m = PushRequest{} }
func (m *PushRequest) String() string            { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()               {}
func (*PushRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PushRequest) GetPosts() []*Post {
	if m != nil {
		return m.Posts
	}
	return nil
}

// The push response contains the result of the calculation.
type PushReply struct {
	Err string `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
}

func (m *PushReply) Reset()                    { *m = PushReply{} }
func (m *PushReply) String() string            { return proto.CompactTextString(m) }
func (*PushReply) ProtoMessage()               {}
func (*PushReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PushReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

// The Select request contains two parameters.
type SelectRequest struct {
	Interval *SpatialTemporalInterval `protobuf:"bytes,1,opt,name=interval" json:"interval,omitempty"`
}

func (m *SelectRequest) Reset()                    { *m = SelectRequest{} }
func (m *SelectRequest) String() string            { return proto.CompactTextString(m) }
func (*SelectRequest) ProtoMessage()               {}
func (*SelectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SelectRequest) GetInterval() *SpatialTemporalInterval {
	if m != nil {
		return m.Interval
	}
	return nil
}

// The Select response contains the result of the select request.
type SelectReply struct {
	Posts []*Post `protobuf:"bytes,1,rep,name=posts" json:"posts,omitempty"`
	Err   string  `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *SelectReply) Reset()                    { *m = SelectReply{} }
func (m *SelectReply) String() string            { return proto.CompactTextString(m) }
func (*SelectReply) ProtoMessage()               {}
func (*SelectReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SelectReply) GetPosts() []*Post {
	if m != nil {
		return m.Posts
	}
	return nil
}

func (m *SelectReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type Post struct {
	ID            string  `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Shortcode     string  `protobuf:"bytes,2,opt,name=Shortcode,json=shortcode" json:"Shortcode,omitempty"`
	ImageURL      string  `protobuf:"bytes,3,opt,name=ImageURL,json=imageURL" json:"ImageURL,omitempty"`
	IsVideo       bool    `protobuf:"varint,4,opt,name=IsVideo,json=isVideo" json:"IsVideo,omitempty"`
	Caption       string  `protobuf:"bytes,5,opt,name=Caption,json=caption" json:"Caption,omitempty"`
	CommentsCount int64   `protobuf:"varint,6,opt,name=CommentsCount,json=commentsCount" json:"CommentsCount,omitempty"`
	Timestamp     int64   `protobuf:"varint,7,opt,name=Timestamp,json=timestamp" json:"Timestamp,omitempty"`
	LikesCount    int64   `protobuf:"varint,8,opt,name=LikesCount,json=likesCount" json:"LikesCount,omitempty"`
	IsAd          bool    `protobuf:"varint,9,opt,name=IsAd,json=isAd" json:"IsAd,omitempty"`
	AuthorID      string  `protobuf:"bytes,10,opt,name=AuthorID,json=authorID" json:"AuthorID,omitempty"`
	LocationID    string  `protobuf:"bytes,11,opt,name=LocationID,json=locationID" json:"LocationID,omitempty"`
	Lat           float64 `protobuf:"fixed64,12,opt,name=Lat,json=lat" json:"Lat,omitempty"`
	Lon           float64 `protobuf:"fixed64,13,opt,name=Lon,json=lon" json:"Lon,omitempty"`
}

func (m *Post) Reset()                    { *m = Post{} }
func (m *Post) String() string            { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()               {}
func (*Post) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Post) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Post) GetShortcode() string {
	if m != nil {
		return m.Shortcode
	}
	return ""
}

func (m *Post) GetImageURL() string {
	if m != nil {
		return m.ImageURL
	}
	return ""
}

func (m *Post) GetIsVideo() bool {
	if m != nil {
		return m.IsVideo
	}
	return false
}

func (m *Post) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *Post) GetCommentsCount() int64 {
	if m != nil {
		return m.CommentsCount
	}
	return 0
}

func (m *Post) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Post) GetLikesCount() int64 {
	if m != nil {
		return m.LikesCount
	}
	return 0
}

func (m *Post) GetIsAd() bool {
	if m != nil {
		return m.IsAd
	}
	return false
}

func (m *Post) GetAuthorID() string {
	if m != nil {
		return m.AuthorID
	}
	return ""
}

func (m *Post) GetLocationID() string {
	if m != nil {
		return m.LocationID
	}
	return ""
}

func (m *Post) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Post) GetLon() float64 {
	if m != nil {
		return m.Lon
	}
	return 0
}

type SpatialTemporalInterval struct {
	MinTime int64   `protobuf:"varint,1,opt,name=MinTime,json=minTime" json:"MinTime,omitempty"`
	MaxTime int64   `protobuf:"varint,2,opt,name=MaxTime,json=maxTime" json:"MaxTime,omitempty"`
	MinLat  float64 `protobuf:"fixed64,3,opt,name=MinLat,json=minLat" json:"MinLat,omitempty"`
	MinLon  float64 `protobuf:"fixed64,4,opt,name=MinLon,json=minLon" json:"MinLon,omitempty"`
	MaxLat  float64 `protobuf:"fixed64,5,opt,name=MaxLat,json=maxLat" json:"MaxLat,omitempty"`
	MaxLon  float64 `protobuf:"fixed64,6,opt,name=MaxLon,json=maxLon" json:"MaxLon,omitempty"`
}

func (m *SpatialTemporalInterval) Reset()                    { *m = SpatialTemporalInterval{} }
func (m *SpatialTemporalInterval) String() string            { return proto.CompactTextString(m) }
func (*SpatialTemporalInterval) ProtoMessage()               {}
func (*SpatialTemporalInterval) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SpatialTemporalInterval) GetMinTime() int64 {
	if m != nil {
		return m.MinTime
	}
	return 0
}

func (m *SpatialTemporalInterval) GetMaxTime() int64 {
	if m != nil {
		return m.MaxTime
	}
	return 0
}

func (m *SpatialTemporalInterval) GetMinLat() float64 {
	if m != nil {
		return m.MinLat
	}
	return 0
}

func (m *SpatialTemporalInterval) GetMinLon() float64 {
	if m != nil {
		return m.MinLon
	}
	return 0
}

func (m *SpatialTemporalInterval) GetMaxLat() float64 {
	if m != nil {
		return m.MaxLat
	}
	return 0
}

func (m *SpatialTemporalInterval) GetMaxLon() float64 {
	if m != nil {
		return m.MaxLon
	}
	return 0
}

func init() {
	proto.RegisterType((*PushRequest)(nil), "pb.PushRequest")
	proto.RegisterType((*PushReply)(nil), "pb.PushReply")
	proto.RegisterType((*SelectRequest)(nil), "pb.SelectRequest")
	proto.RegisterType((*SelectReply)(nil), "pb.SelectReply")
	proto.RegisterType((*Post)(nil), "pb.Post")
	proto.RegisterType((*SpatialTemporalInterval)(nil), "pb.SpatialTemporalInterval")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Dbsvc service

type DbsvcClient interface {
	// Push array of posts to database
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error)
	// Select array from database, each element from array belongs the interval
	Select(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectReply, error)
}

type dbsvcClient struct {
	cc *grpc.ClientConn
}

func NewDbsvcClient(cc *grpc.ClientConn) DbsvcClient {
	return &dbsvcClient{cc}
}

func (c *dbsvcClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error) {
	out := new(PushReply)
	err := grpc.Invoke(ctx, "/pb.Dbsvc/Push", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbsvcClient) Select(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectReply, error) {
	out := new(SelectReply)
	err := grpc.Invoke(ctx, "/pb.Dbsvc/Select", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Dbsvc service

type DbsvcServer interface {
	// Push array of posts to database
	Push(context.Context, *PushRequest) (*PushReply, error)
	// Select array from database, each element from array belongs the interval
	Select(context.Context, *SelectRequest) (*SelectReply, error)
}

func RegisterDbsvcServer(s *grpc.Server, srv DbsvcServer) {
	s.RegisterService(&_Dbsvc_serviceDesc, srv)
}

func _Dbsvc_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbsvcServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Dbsvc/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbsvcServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dbsvc_Select_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbsvcServer).Select(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Dbsvc/Select",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbsvcServer).Select(ctx, req.(*SelectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dbsvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Dbsvc",
	HandlerType: (*DbsvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Dbsvc_Push_Handler,
		},
		{
			MethodName: "Select",
			Handler:    _Dbsvc_Select_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dbsvc.proto",
}

func init() { proto.RegisterFile("dbsvc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0x49, 0xd2, 0x3f, 0xc9, 0x84, 0xb2, 0xe0, 0x03, 0x58, 0x0b, 0xac, 0xaa, 0x88, 0x43,
	0x2e, 0xf4, 0x50, 0x0e, 0x1c, 0x51, 0xd5, 0x1e, 0x88, 0xd4, 0x95, 0x56, 0xe9, 0xc2, 0xdd, 0x4d,
	0x2c, 0x6a, 0x91, 0xd8, 0x26, 0x76, 0x57, 0xbb, 0x0f, 0xc5, 0x1b, 0xf1, 0x30, 0xc8, 0x13, 0xa7,
	0xed, 0x05, 0x71, 0xeb, 0xf7, 0x9b, 0xcf, 0xe3, 0xf1, 0xf4, 0x0b, 0xa4, 0xf5, 0xde, 0x3c, 0x54,
	0x0b, 0xdd, 0x29, 0xab, 0x48, 0xa8, 0xf7, 0xd9, 0x47, 0x48, 0xef, 0x8e, 0xe6, 0x50, 0xf2, 0x5f,
	0x47, 0x6e, 0x2c, 0xb9, 0x81, 0xb1, 0x56, 0xc6, 0x1a, 0x1a, 0xcc, 0xa3, 0x3c, 0x5d, 0xc6, 0x0b,
	0xbd, 0x5f, 0xdc, 0x29, 0x63, 0xcb, 0x1e, 0x67, 0xef, 0x21, 0xe9, 0xed, 0xba, 0x79, 0x22, 0x2f,
	0x21, 0xe2, 0x5d, 0x47, 0x83, 0x79, 0x90, 0x27, 0xa5, 0xfb, 0x99, 0x7d, 0x85, 0xd9, 0x8e, 0x37,
	0xbc, 0xb2, 0x43, 0xbf, 0xcf, 0x10, 0x0b, 0x69, 0x79, 0xf7, 0xc0, 0x1a, 0xf4, 0xa5, 0xcb, 0xb7,
	0xae, 0xe5, 0x4e, 0x33, 0x2b, 0x58, 0x73, 0xcf, 0x5b, 0xad, 0x3a, 0xd6, 0x14, 0xde, 0x52, 0x9e,
	0xcc, 0xd9, 0x17, 0x48, 0x87, 0x4e, 0xee, 0xaa, 0xff, 0xcc, 0x35, 0x8c, 0x12, 0x9e, 0x47, 0xf9,
	0x13, 0xc2, 0xc8, 0x39, 0xc8, 0x0b, 0x08, 0x8b, 0x8d, 0x1f, 0x32, 0x14, 0x1b, 0xf2, 0x0e, 0x92,
	0xdd, 0x41, 0x75, 0xb6, 0x52, 0x35, 0xf7, 0x07, 0x12, 0x33, 0x00, 0x72, 0x0d, 0x71, 0xd1, 0xb2,
	0x1f, 0xfc, 0x5b, 0xb9, 0xa5, 0x11, 0x16, 0x63, 0xe1, 0x35, 0xa1, 0x30, 0x2d, 0xcc, 0x77, 0x51,
	0x73, 0x45, 0x47, 0xf3, 0x20, 0x8f, 0xcb, 0xa9, 0xe8, 0xa5, 0xab, 0xac, 0x99, 0xb6, 0x42, 0x49,
	0x3a, 0xc6, 0x43, 0xd3, 0xaa, 0x97, 0xe4, 0x03, 0xcc, 0xd6, 0xaa, 0x6d, 0xb9, 0xb4, 0x66, 0xad,
	0x8e, 0xd2, 0xd2, 0xc9, 0x3c, 0xc8, 0xa3, 0x72, 0x56, 0x5d, 0x42, 0x37, 0xd3, 0xbd, 0x68, 0xb9,
	0xb1, 0xac, 0xd5, 0x74, 0x8a, 0x8e, 0xc4, 0x0e, 0x80, 0xdc, 0x00, 0x6c, 0xc5, 0x4f, 0xee, 0x1b,
	0xc4, 0x58, 0x86, 0xe6, 0x44, 0x08, 0x81, 0x51, 0x61, 0x56, 0x35, 0x4d, 0x70, 0xa8, 0x91, 0x30,
	0xab, 0xda, 0xbd, 0x63, 0x75, 0xb4, 0x07, 0xd5, 0x15, 0x1b, 0x0a, 0xfd, 0x3b, 0x98, 0xd7, 0xd8,
	0x4f, 0x55, 0xcc, 0xcd, 0x57, 0x6c, 0x68, 0x8a, 0x55, 0x68, 0x4e, 0xc4, 0x2d, 0x73, 0xcb, 0x2c,
	0x7d, 0x3e, 0x0f, 0xf2, 0xa0, 0x8c, 0x1a, 0x66, 0x91, 0x28, 0x49, 0x67, 0x9e, 0x28, 0x99, 0xfd,
	0x0e, 0xe0, 0xcd, 0x3f, 0xfe, 0x45, 0xb7, 0x8d, 0x5b, 0x21, 0xdd, 0x83, 0x70, 0xed, 0x51, 0x39,
	0x6d, 0x7b, 0x89, 0x15, 0xf6, 0x88, 0x95, 0xd0, 0x57, 0x7a, 0x49, 0x5e, 0xc3, 0xe4, 0x56, 0x48,
	0x77, 0x6d, 0x84, 0x97, 0x4c, 0x5a, 0x54, 0x03, 0x57, 0x12, 0x57, 0xee, 0xb9, 0x92, 0xc8, 0xd9,
	0xa3, 0xf3, 0x8f, 0x3d, 0x47, 0x35, 0x70, 0x25, 0x71, 0xd1, 0x9e, 0x2b, 0xb9, 0x64, 0x30, 0xde,
	0xb8, 0xe8, 0x93, 0x1c, 0x46, 0x2e, 0xc1, 0xe4, 0x0a, 0x23, 0x74, 0x8e, 0xfe, 0xf5, 0xec, 0x0c,
	0x74, 0xf3, 0x94, 0x3d, 0x23, 0x0b, 0x98, 0xf4, 0x11, 0x24, 0xaf, 0x30, 0xb3, 0x97, 0xc1, 0xbe,
	0xbe, 0xba, 0x44, 0xe8, 0xdf, 0x4f, 0xf0, 0xab, 0xfa, 0xf4, 0x37, 0x00, 0x00, 0xff, 0xff, 0x79,
	0x4a, 0x65, 0x04, 0x64, 0x03, 0x00, 0x00,
}
