syntax = "proto3";

package proto;

import "data-storage/proto/gogo.proto";
import "proto/data.proto";

service DataStorage {
    rpc PushPosts (PushPostsRequest) returns (PushPostsReply) {}
    rpc SelectPosts (SelectPostsRequest) returns (SelectPostsReply) {}

    rpc SelectAggrPosts (SelectAggrPostsRequest) returns (SelectAggrPostsReply) {}

    rpc PullTimeline (PullTimelineRequest) returns (PullTimelineReply) {}

    rpc PushGrid (PushGridRequest) returns (PushGridReply) {}
    rpc PullGrid (PullGridRequest) returns (PullGridReply) {}

    rpc PushEvents (PushEventsRequest) returns (PushEventsReply) {}
    rpc PullEvents (PullEventsRequest) returns (PullEventsReply) {}

    rpc PushLocations (PushLocationsRequest) returns (PushLocationsReply) {}
    rpc PullLocations (PullLocationsRequest) returns (PullLocationsReply) {}
}


// PushPostsRequest represents a request for loading posts from crawler to data storage.
message PushPostsRequest {
    repeated data.Post posts = 1 [(gogoproto.nullable) = false];
    string cityId = 2;
}

message PushPostsReply {
    repeated int32 ids = 1;
    string err = 2;
}

message SelectPostsRequest {
    //data.SpatioTemporalInterval interval = 1 [(gogoproto.nullable) = false];
    int64 startTime = 1;
    int64 finishTime = 2;
    string cityId = 3;
}

message SelectPostsReply {
    repeated data.Post posts = 1 [(gogoproto.nullable) = false];
    data.Area area = 2;
    string err = 3;
}

// messages for select aggr posts
message SelectAggrPostsRequest {
    data.SpatioHourInterval interval = 1 [(gogoproto.nullable) = false];
    string cityId = 2;
}

message SelectAggrPostsReply {
    repeated data.AggregatedPost posts = 1 [(gogoproto.nullable) = false];
    string err = 2;
}

// messages for pull timelines
message PullTimelineRequest {
    string cityId = 1;
    int64 start = 2;
    int64 finish = 3;
}

message PullTimelineReply {
    repeated data.Timestamp timeline = 1 [(gogoproto.nullable) = false];
    string err = 2;
}

// messages for pull and push grids
message PushGridRequest {
    repeated int64 ids = 1;
    repeated bytes blobs = 2;
    string cityId = 3;
}

message PushGridReply {
    string err = 1;
}

message PullGridRequest {
    int64 startId = 1;
    int64 finishId = 2;
    string cityId = 3;
}

message PullGridReply {
    repeated int64 ids = 1;
    repeated bytes blobs = 2;
    string err = 3;
}

// messages gor pull and push events
message PushEventsRequest {
    repeated data.Event events = 1 [(gogoproto.nullable) = false];
    string cityId = 2;
}

message PushEventsReply {
    string err = 1;
}

message PullEventsRequest {
    data.SpatioHourInterval interval = 1 [(gogoproto.nullable) = false];
    string cityId = 2;
}

message PullEventsReply {
    repeated data.Event events = 1 [(gogoproto.nullable) = false];
    string err = 2;
}

// messages for pull and push locations
message PushLocationsRequest {
    string cityId = 1;
    repeated data.Location locations = 2 [(gogoproto.nullable) = false];
}

message PushLocationsReply {
    string err = 1;
}

message PullLocationsRequest {
    string cityId = 1;
}

message PullLocationsReply {
    repeated data.Location locations = 1 [(gogoproto.nullable) = false];
    string err = 2;
}

